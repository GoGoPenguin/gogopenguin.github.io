<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS Power Hour: Cloud Practitioner | Global Infrastructure and Networking</title>
    <url>/2021/11/10/aws-power-hour-cloud-practitioner-global-infrastructure-and-networking/</url>
    <content><![CDATA[<blockquote>
<p>Building on the previous episode, we’ll explore the global infrastructure of AWS, networking services like the Virtual Private Cloud (VPC) as well as how that infrastructure can be connected to your premises.</p>
</blockquote>
<span id="more"></span>

<h1 id="全球基礎設施"><a href="#全球基礎設施" class="headerlink" title="全球基礎設施  "></a>全球基礎設施  <!-- markdownlint-disable MD025 --></h1><h2 id="資料中心"><a href="#資料中心" class="headerlink" title="資料中心"></a>資料中心</h2><p>AWS 的資料中心擁有許多備援機制，即使發生意外斷電了也能夠保證網路連線不會中斷。若這個資料中心發生錯誤，你可以很快的切換到下一個可用區域的資料中心</p>
<p>查看更多關於<a href="https://aws.amazon.com/tw/compliance/data-center/controls/">資料中心</a>的資訊。</p>
<h2 id="區域與可用區域"><a href="#區域與可用區域" class="headerlink" title="區域與可用區域"></a>區域與可用區域</h2>

<p>可用區域（Ability Zone）由多個資料中心（Data Center）所組成，而可用區域也擁有備援機制。當其中一個可用區域發生錯誤，另一個可用區域會起來取代它，並接續它的工作。而多個可用區域會再組成區域（Region），每個區域之間都有 AWS 專屬的高速、低延遲的網路串連。</p>
<p>假設今天用戶的應用程式建置在 AZ-1A 之中，當 AZ-1A 發生錯誤時，用戶能夠很輕鬆的將他的程式轉移到 AZ-1B，歸功於 AWS 的高速網路。如此一來，應用程式就能保證一定程度的可用性。</p>
<p>AWS 在全球建置了許多區域和可用區域，在<a href="https://aws.amazon.com/about-aws/global-infrastructure/?nc1=h_ls">這裡</a>可以查看到 AWS 的全球基礎設施。</p>
<p>而區域之間是互相隔離的，這表示 AWS 不會隨意的將用戶資料從一個區域移動到另一個區域，除非得到用戶的允許。</p>
<h3 id="區域的選擇"><a href="#區域的選擇" class="headerlink" title="區域的選擇"></a>區域的選擇</h3><ul>
<li><p>管理或監督的需求</p>
<p>若是有資料安全的疑慮，不希望資料被儲存在其他地區，就可以選擇自己信任的區域。</p>
</li>
<li><p>鄰近客戶</p>
<p>為了降低資料的響應時間，可以選擇鄰近客戶的區域。</p>
</li>
<li><p>服務的可用性</p>
<p>隨著服務的增長，你可能會需要將服務擴展到其他區域，來服務更多的用戶。</p>
</li>
<li><p>成本</p>
<p>依照不同國家或地區的成本，不同的區域會有不同的成本，因此這也會是一個選擇區域的考量點之一。</p>
</li>
</ul>
<h2 id="CloudFront"><a href="#CloudFront" class="headerlink" title="CloudFront"></a>CloudFront</h2><p>Amazon <a href="https://aws.amazon.com/cloudfront">CloudFront</a> 是一項內容交付網路 (<a href="https://en.wikipedia.org/wiki/Content_delivery_network">CDN</a>) 服務，專為實現高效能、安全性和開發人員便利性而建置。</p>
<img data-src="/2021/11/10/aws-power-hour-cloud-practitioner-global-infrastructure-and-networking/without-cdn.png" class="">

<p>假設今天我們的服務架設在美國，那位在澳洲的用戶利用網路存取服務時，就得經過較長的路徑來存取的資源，例如：圖片、影片 … 等，這意味著較長的響應時間以及較差的使用者體驗。那我們該如何解決這問題？</p>
<img data-src="/2021/11/10/aws-power-hour-cloud-practitioner-global-infrastructure-and-networking/cdn.png" class="">

<p>利用 CloudFront，我們可以決定我們要快取哪些資料。快取就是將資料放在離使用者較近的地方，讓使用者能夠更快速地存取到資料。所以當澳洲的用戶要存取我們的服務時，就不用再大老遠的存取位在美國的資料，只需要存在放在澳洲內的快取即可。</p>
<p>關於快取，有一點要注意的是存活時間（TTL, Time To Live）。設定快取的存活時間，當時效過期時，要重新從原本的資料複製一份過來，避免快取的資料過於老舊。</p>
<p>CDN 對於需要部署在全球的服務來說非常重要，透過 CDN，我們不必在全球 25 個區域中都部署相同的基礎設施，只需要在一個區域內部署，再將資料快取在各個地方即可。</p>
<h2 id="Outposts"><a href="#Outposts" class="headerlink" title="Outposts"></a>Outposts</h2><p>若你需要極度低的延遲，或是有管理的需求需要將資料放置在私有雲，但卻想要享有使用 AWS 服務的好處的話，那 AWS <a href="https://aws.amazon.com/outposts/">Outposts</a> 或許是一個解決方案。</p>
<p>AWS Outposts 是一個全代管的數據中心，提供同樣的 AWS 基礎架構、AWS 服務、API 和工具。同時，你也可以使用 AWS 區域中的那些不能夠在 Outposts 上執行的服務，實現混合雲的應用。</p>
<h1 id="網路"><a href="#網路" class="headerlink" title="網路"></a>網路</h1><img data-src="/2021/11/10/aws-power-hour-cloud-practitioner-global-infrastructure-and-networking/networking.png" class="" title="Networking">

<h2 id="虛擬私有雲"><a href="#虛擬私有雲" class="headerlink" title="虛擬私有雲"></a>虛擬私有雲</h2><p>Amazon Virtual Private Cloud (<a href="https://aws.amazon.com/vpc/">VPC</a>) 是一個可以完全控制的虛擬網路環境。</p>
<p>VPC 內可以建立子網域，分別為公有和私有子網路。公有子網域可以被直接的連線，適合放置公開的服務，例如：網頁前端、後端。而私有內無法直連，適合一些需要隱私的服務，例如：資料庫。</p>
<p>公有子網域會透過<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html">網際網路閘道</a>（Internet Gateway）和網際網路之間通訊。而私有子網域則是透過<a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat.html">NAT 裝置</a>（NAT device）連線到網際網路。</p>
<p><a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">更多關於 VPC</a>。</p>
<h3 id="連線方式"><a href="#連線方式" class="headerlink" title="連線方式"></a>連線方式</h3><ul>
<li>IPsec VPN</li>
</ul>
<p>使用 VPN 連線至 VPC 可以確保連線是受到加密保護的。AWS 會同時建立兩條網路連線，當其中一條連線發生錯誤，使用者任可以透過另一條通道連線。</p>
<img data-src="/2021/11/10/aws-power-hour-cloud-practitioner-global-infrastructure-and-networking/vpn.png" class="" title="VPN">

<ul>
<li>Direct Connect</li>
</ul>
<p>Direct Connect 可以減少連線成本、提高網路頻寬。透過 Direct Connect 可以建立 1 Gbps 或 10 Gbps<br>的網路連線。</p>
<img data-src="/2021/11/10/aws-power-hour-cloud-practitioner-global-infrastructure-and-networking/dx.png" class="" title="Direct Connect">

<p><a href="https://docs.aws.amazon.com/whitepapers/latest/aws-vpc-connectivity-options/network-to-amazon-vpc-connectivity-options.html">更多連線方式</a>。</p>
<h2 id="平衡負載"><a href="#平衡負載" class="headerlink" title="平衡負載"></a>平衡負載</h2><p>Elastic Load Balancing (ELB) 會自動將傳入的應用程式流量分配在一個或多個可用區域 (AZ) 中的多個目標和虛擬設備上。</p>
<p>透過平衡負載，當其中一個 AZ 發生錯誤時，可以自動將流量轉移到另外一個 AZ，以提供用戶高可用（High Available）的使用體驗。</p>
<p><a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/what-is-load-balancing.html">更多關於 ELB</a>。</p>
<h1 id="課後問題"><a href="#課後問題" class="headerlink" title="課後問題"></a>課後問題</h1><ol>
<li><p>Each AWS region is composed of two or more locations that offer organizations the ability to operate production systems that are more highly available, fault tolerant, and scalable than would be possible using a single data center. What are these locations called ?</p>
<ol>
<li>Edge Locations</li>
<li>AWS Local Zones</li>
<li>Available Zones</li>
<li>Compute centers</li>
</ol>
</li>
<li><p>What is the primary benefit of an AWS Edge Location?</p>
<ol>
<li>Lower costs for content storage</li>
<li>Stronger authentication controls</li>
<li>Data sovereignty controls</li>
<li>Lower latency delivery of content to end users</li>
</ol>
</li>
<li><p>What AWS Cloud service provides a logically isolated areas within the AWS Cloud where organizations can launch AWS resources in a virtual network that the define</p>
<ol>
<li>Amazon Virtual Private Cloud</li>
<li>Amazon Route 53</li>
<li>Amazon Virtual Private Network</li>
<li>Amazon Direct Connect</li>
</ol>
</li>
</ol>
<p>答案：</p>
<ol>
<li><code>3</code></li>
<li><code>4</code></li>
<li><code>1</code></li>
</ol>
]]></content>
      <tags>
        <tag>aws</tag>
        <tag>cloud practitioner</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Power Hour: Cloud Practitioner | Intro to AWS Cloud</title>
    <url>/2021/11/08/aws-power-hour-cloud-practitioner-intro-to-aws-cloud/</url>
    <content><![CDATA[<blockquote>
<p>Learn about the six benefits of cloud, common cloud adoption strategies, and cloud compute. We’ll explore compute services by digging into Amazon Elastic Compute Cloud (Amazon EC2) with a focus on helping you understand the important aspects of creating an EC2 instance.</p>
</blockquote>
<span id="more"></span>

<h1 id="AWS-證照"><a href="#AWS-證照" class="headerlink" title="AWS 證照 "></a>AWS 證照 <!-- markdownlint-disable MD025 --></h1><p>下圖為 AWS 可用的證照：</p>
<p>左邊灰底為「角色型認證」的證照，依照工作職稱或是需求的不同，可以選擇相關的證照。</p>
<p>右邊則是指定專業領域的「專家級」證照。</p>
<p><img data-src="https://miro.medium.com/max/1400/1*4fl-1Eh_yI1cVPYaROn_3w.png" alt="Available AWS Certifications"></p>
<p>相關網址：</p>
<ul>
<li><a href="https://www.google.com/aclk?sa=L&ai=DChcSEwim_MzJ_4n0AhULupYKHS3yCLIYABAAGgJ0bA&ae=2&sig=AOD64_3qeem0qBNX0ACU1IaetgUfWbonzQ&q&adurl&ved=2ahUKEwjsqcbJ_4n0AhWbdd4KHWZsCDoQ0Qx6BAgDEAE">AWS 證照</a></li>
<li><a href="https://aws.amazon.com/training/learn-about/">按角色或解決方案進行學習</a></li>
</ul>
<h1 id="關於考試"><a href="#關於考試" class="headerlink" title="關於考試"></a>關於考試</h1><ul>
<li>Q: 題數<ul>
<li>A: 65</li>
</ul>
</li>
<li>Q: 種類<ul>
<li>A: 多選題、複選題</li>
</ul>
</li>
<li>Q: 時間<ul>
<li>90 分鐘</li>
</ul>
</li>
<li>Q: 費用<ul>
<li>A: 100 美金</li>
</ul>
</li>
<li>Q: 總分<ul>
<li>A: 最低 100 分，滿分 1000 分，700 分及格</li>
</ul>
</li>
<li>Q: 考場<ul>
<li>A: 集中考場或線上考試，但需要有 Webcam</li>
</ul>
</li>
<li>Q: 如何安排考試<ul>
<li>A: 到<a href="https://www.aws.training/certification">這裡</a>報名</li>
</ul>
</li>
</ul>
<h1 id="什麼是雲？"><a href="#什麼是雲？" class="headerlink" title="什麼是雲？"></a>什麼是雲？</h1><p>「雲」是一種透過網路按需求的 IT 資源，採用多少算多少的付費模式。</p>
<blockquote>
<p>Cloud computing is the on-demand delivery of IT resources via the internet with a pay-as-you-go pricing model</p>
</blockquote>
<p>那「IT 資源」又是什麼？它包含：</p>
<ul>
<li>計算資源（Compute）</li>
<li>資料庫（Database）</li>
<li>儲存空間（Storage）</li>
</ul>
<p>雲的好處是你可以隨時透過網路去租借資源，且隨時都能夠終止。</p>
<h1 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h1><img data-src="/2021/11/08/aws-power-hour-cloud-practitioner-intro-to-aws-cloud/deployment-models.png" class="" title="Deployment Models">

<ul>
<li>私有雲（on-premises）</li>
<li>公有雲 (cloud deployment)</li>
<li>混合雲（hybrid deployment）</li>
</ul>
<h1 id="使用雲端的好處"><a href="#使用雲端的好處" class="headerlink" title="使用雲端的好處"></a>使用雲端的好處</h1><ul>
<li><p>節省費用支出</p>
<p>使用雲端服務可以減少前期開發時的硬體成本，因為雲服務可以依據使用量來計價，不必一次購入昂貴的機器。</p>
</li>
<li><p>不用自己維護機器</p>
<p>將維護的工作交給雲端公司，讓開發人員能夠更專注於開發應用程式上面。</p>
</li>
<li><p>不用猜測要多大機器規格</p>
<p>雲端主機能依據使用量來<a href="https://en.wikipedia.org/wiki/Autoscaling">自動擴展</a>（auto-scaling），在滿足需求的同時又能夠省去不必要的花費</p>
</li>
<li><p>受益於巨大的規模經濟</p>
<p>雲端服務公司擁有數以萬計的使用者，讓他們在購買硬體設備時，能夠以更低的價額購入，最後再以便宜的租借成本回饋給使用者。</p>
</li>
<li><p>增加速度以及敏捷</p>
<p>今天我有個點子，只需要用滑鼠點擊就能夠租借到運算資源，不花時間去準備硬體設備。若這點子成功，那就太棒了；若是失敗，也可以簡單地關閉服務，而且我只需要負擔我所使用的部分。</p>
</li>
<li><p>將服務部署到全世界</p>
<p>AWS 在全球都有部署機器，所以我們能夠很簡單的將應用程式部署到世界各地。</p>
</li>
</ul>
<h1 id="三種使用-AWS-的方式"><a href="#三種使用-AWS-的方式" class="headerlink" title="三種使用 AWS 的方式"></a>三種使用 AWS 的方式</h1><ul>
<li><p>AWS 管理主控台</p>
<p>這是最簡單也是最直覺的方式。</p>
<p><img data-src="https://d1.awsstatic.com/AWS-Management-Console/Polaris%20Console%20Home.6f773790a19ed7c9a37fcfeddb09076cc52a44e8.png" alt="AWS Management Console"></p>
</li>
<li><p><a href="https://aws.amazon.com/cli/?nc1=h_ls">CLI</a>（Command Line Interface）</p>
<p>若是想要在自動化之中去驗證或是存取 AWS，那就能夠使用這方法。</p>
</li>
<li><p>SDK（Software Development Kit）</p>
<p>舉凡 <code>Python</code>、<code>.NET</code>、<code>JAVA</code>、<code>NodeJS</code> … 等等，都有相對應的套件能夠去使用 AWS 的資源。</p>
</li>
</ul>
<h1 id="Amazon-Elastic-Compute-Cloud-Amazon-EC2"><a href="#Amazon-Elastic-Compute-Cloud-Amazon-EC2" class="headerlink" title="Amazon Elastic Compute Cloud (Amazon EC2)"></a>Amazon Elastic Compute Cloud (Amazon EC2)</h1><p>EC2 使用虛擬化技術，輕鬆地在一台實體主機上面運行多個 EC2 服務。他們可以實行不同的作業系統，例如：Windows, Linux 甚至 Mac OS。</p>
<p>不必擔心 EC2 之間會去互相干擾影響，因為他們是使用 <a href="https://zh.wikipedia.org/wiki/Hypervisor">Hypervisor</a> 技術去做管理，虛擬機始終受到保護且彼此獨立。</p>
<blockquote>
<p>補充：這邊的「虛擬機」是指 <a href="https://www.vmware.com/tw.html">VMware</a> 或是 <a href="https://www.virtualbox.org/">VirtualBox</a> 這類型的產品。而<a href="https://www.openstack.org/">OpenStack</a> 為一種開源雲端軟體，用來管理機器上虛擬機。</p>
</blockquote>
<p>讓我們回想一下，若是使用自架機器的方案，當今天使用量增加，你能夠去購買更多台設備來應付突如其來的大量請求，但這不是立即的。使用 EC2 的話，只需要在網頁上點幾下，只需要幾分鐘內就能夠擴展到符合需求的硬體規格。甚至可以設定自動擴展，如此一來就不需要人工介入。</p>
<h2 id="啟動一台-EC2"><a href="#啟動一台-EC2" class="headerlink" title="啟動一台 EC2"></a>啟動一台 EC2</h2><ul>
<li><p>到 AWS 管理主控台搜尋 EC2</p>
</li>
<li><p>點選右上角「啟動實例」</p>
</li>
<li><p>選擇 AMI（Amazon Machine Image）</p>
<p>AMI 可以視為 EC2 的模板，它可能是一個基本的作業系統，或是由第三方開發商提供的應用程式。</p>
<p>可以從左邊選單，去選擇不同類型的 AMI</p>
<ul>
<li><p>Quick Start</p>
<p>這裡包含了一些基本的 AMI，包含：<code>Ubuntu</code>、<code>Windows</code>、<code>REHL</code>、<code>Mac OS</code> 等。</p>
</li>
<li><p>AWS Marketplace</p>
<p>這裏則是由第三方開發商提供的，內建一些他們所提供的應用程式，例如：<code>OpenVPN</code>、<code>LAMP</code> 等。</p>
</li>
<li><p>My AMIs</p>
<p>你也可以自己建立屬於自己的 AMI，然後在未來重複使用，或是分享給其他人。</p>
</li>
</ul>
</li>
<li><p><a href="https://aws.amazon.com/tw/ec2/instance-types/">選擇機器種類</a></p>
<p>EC2 有許多不同類型可以選擇，依照不同需求來選擇不同類型的機器。</p>
<img data-src="/2021/11/08/aws-power-hour-cloud-practitioner-intro-to-aws-cloud/instance-type.png" class="" title="Instance Type">

<p>以 <code>t3.medium</code> 為例：</p>
<ul>
<li><code>t</code> 代表一般用途</li>
<li><code>3</code> 代表世代，AWS 定期發佈新一代的機器，通常新的世代會擁有更好的性價比</li>
<li><code>medium</code> 代表機器大小，擁有更多的 CPU 核心和記憶體</li>
</ul>
</li>
<li><p>詳細設定</p>
<p>這邊先介紹其中幾項設定：</p>
<ul>
<li><p>Number of instances</p>
<p>你可以設定一次要啟動起個 EC2 實例。</p>
</li>
<li><p>Network</p>
<p>指定 EC2 要在哪個虛擬網路下執行。</p>
</li>
<li><p>User data</p>
<p>使用者可以在這邊填入腳本，當 EC2 啟動後會去執行它。</p>
</li>
</ul>
</li>
<li><p>設定容量</p>
<p>你可以去設定 EC2 的硬碟容量</p>
</li>
<li><p>設定標籤</p>
<p>新增標籤可以幫助分類管理 EC2</p>
</li>
<li><p>設定「安全群組」</p>
<p>安全群組（Security Group）可以當作一種防火牆，它用來設定網路規則</p>
</li>
<li><p>選擇金鑰</p>
<p><a href="https://en.wikipedia.org/wiki/Public-key_cryptography">金鑰</a>分別為公鑰和私鑰，來於之後要 ssh 到 EC2 時使用。</p>
</li>
</ul>
<h1 id="課後問題"><a href="#課後問題" class="headerlink" title="課後問題"></a>課後問題</h1><ol>
<li><p>Which of the following is an advantage of cloud computing? (Select Two)</p>
<ol>
<li>Help you more easily reach your custom around your city</li>
<li>Eliminates having to guess your infrastructure capacity needs</li>
<li>Ensure you meet all your security compliance requirements</li>
<li>Increase speed to market</li>
<li>Reduce the need for developers to write code</li>
</ol>
</li>
<li><p>What are the benefits of using Amazon EC2 instances compared to physical on-premises servers? (Select Two)</p>
<ol>
<li>The flexibility to scale capacity on demand</li>
<li>The short delivery time when you order an Amazon EC2 instance</li>
<li>The ability to attach your own physical disks on Amazon EC2 instance hardware</li>
<li>You can permanently run enough instances to handle peak workloads</li>
<li>You only pay for the capacity the you provision</li>
</ol>
</li>
</ol>
<p>答案：</p>
<ol>
<li><p><code>2</code> 和 <code>4</code></p>
</li>
<li><p><code>1</code> 和 <code>5</code></p>
</li>
</ol>
<p>這裡還有 30 題的<a href="https://amazonmr.au1.qualtrics.com/jfe/form/SV_eyBlfVF4Sloz1zL?CPEPowerHour=APR21IntroAWSCloud">線上測驗</a></p>
]]></content>
      <tags>
        <tag>aws</tag>
        <tag>cloud practitioner</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 基本概念</title>
    <url>/2021/11/13/docker-basic/</url>
    <content><![CDATA[<p>今天來聊聊 Docker 的一些基本概念以及 Docker 的架構。</p>
<span id="more"></span>

<h1 id="Docker-三元素"><a href="#Docker-三元素" class="headerlink" title="Docker 三元素 "></a>Docker 三元素 <!-- markdownlint-disable MD025 --></h1><p>在 Docker 中，有幾個基本的名詞，分別是：</p>
<ol>
<li>映像檔（Image）</li>
<li>容器（Container）</li>
<li>倉庫（Repository）</li>
</ol>
<p>比喻來說，映像檔就如同作業系統安裝光碟，可以重複在不同的電腦上安裝，而每一台安裝後的電腦就可以想像成是容器，最後倉庫則是從放光碟的盒子。</p>
<h2 id="映像檔"><a href="#映像檔" class="headerlink" title="映像檔"></a>映像檔</h2><p>Docker 映像檔是一個模板，用來重複產生容器實體。</p>
<p>例如：一個映像檔可以是一個單純的作業系統，或是包含資料庫的服務，又或者是 Python 的執行環境。</p>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器則是利用映像檔執行後的一個實例，一個映像檔可以同時啟動多個容器。它可以被啟動、開始、停止、刪除，且每個容器都是相互隔離的。</p>
<p>例如：我們可以拿 <code>Ubuntu</code> 的映像檔來同時啟動多個容器來進行不同的操作，又或者拿 <code>MySQL</code> 的映像檔來啟動多個容器來建立資料庫叢集。</p>
<h2 id="倉庫"><a href="#倉庫" class="headerlink" title="倉庫"></a>倉庫</h2><p>倉庫（Repository）是集中存放映像檔檔案的地方，而倉庫註冊伺服器（Registry）上則存放著多個倉庫，概念就如同 GitHub 與 Repository。</p>
<p>倉庫註冊伺服器有分公有以及私有，最大的公有倉庫註冊伺服器則是 <a href="https://hub.docker.com/">Docker Hub</a>，上面存放了數量龐大的映像檔供使用者下載。</p>
<p>使用者也可以在自己的電腦上面建立自己的倉庫註冊伺服器。</p>
<p>而 Docker 的倉庫註冊伺服器與 <a href="http://git-scm.com/">git</a> 的操作類似，都是透過 <code>push</code>, <code>pull</code> 指令來上傳以及下載。</p>
<h1 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h1><img data-src="/2021/11/13/docker-basic/client-server.png" class="" title="Architecture">

<p>Docker 是 client-server 的架構，Docker client 與 Docker daemon 溝通，後者負責構建、運行和分發 Docker 容器的工作。</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Daemon_(computing)">Daemon</a> 是一種在後台執行的電腦程式。</p>
</blockquote>
<p>Docker client 和 Docker daemon 可以安裝在同一台電腦中，或是 Docker client 可以連線到遠端的 Docker daemon。他們之間的溝通是使用 Restful API，透過 HTTP 網路或是 UNIX sockets。</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Unix_domain_socket">UNIX socket</a> 用於一台主機的 process 之間溝通，不需要建立在網絡 protocol 之上，主要是基於 file system 而發展的。</p>
</blockquote>
<h2 id="Docker-daemon"><a href="#Docker-daemon" class="headerlink" title="Docker daemon"></a>Docker daemon</h2><p>Docker daemon（<code>dockerd</code>）用來接收 API 請求，然後管理各項 Docker 資源，例如：image, container。</p>
<h2 id="Docker-client"><a href="#Docker-client" class="headerlink" title="Docker client"></a>Docker client</h2><p>Docker client（<code>docker</code>）是主要用來跟 Docker 溝通的方法，它會傳送指令到 <code>dockerd</code>。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>像 Docker 這樣子的 client-server 還蠻常見的，通常名稱有 <code>d</code> 結尾的，常是代表 daemon 的意思。例如：<code>sshd</code>, <code>systmed</code>, <code>supervisord</code> … 等。而對應 client 就是 <code>ssh</code>、<code>systemctl</code>、<code>supervisorctl</code>，這邊的 <code>ctl</code> 則是 <code>control</code> 的意思。</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 簡介</title>
    <url>/2021/11/07/docker-introduction/</url>
    <content><![CDATA[<p><img data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Docker_%28container_engine%29_logo.svg/1220px-Docker_%28container_engine%29_logo.svg.png" alt="logo"></p>
<h1 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹 "></a>基本介紹 <!-- markdownlint-disable MD025 --></h1><p><a href="https://www.docker.com/">Docker</a> 是一個開源專案，出現於 2013 年初，最初是 Dotcloud 公司內部的 Side-Project。</p>
<p>它基於 Google 公司推出的 <a href="https://golang.org/">Go</a> 語言實作。（ Dotcloud 公司後來改名為 Docker ）</p>
<span id="more"></span>

<h2 id="Docker-是什麼？"><a href="#Docker-是什麼？" class="headerlink" title="Docker 是什麼？"></a>Docker 是什麼？</h2><p>Docker 是一種<a href="https://containerd.io/">容器</a>，而容器是打包代碼及其所有依賴項的標準軟件單元，因此應用程式可以從一個計算環境快速可靠地運行到另一個計算環境。</p>
<p>不太明白？沒關係，我們先來看看 Docker 能夠替我們解決什麼問題。</p>
<ul>
<li><p>簡化建置環境的麻煩</p>
</li>
<li><p>不同平台的相容性</p>
</li>
</ul>
<p>以往在開發之前都要去安裝一大堆套件之後，才能夠開始寫 code</p>
<p>例如：開發前端就要裝 <code>node</code> 、開發後端可能就要安裝一個後端語言或是資料庫</p>
<p>依照使用的套件的不同，還得再安裝其他不同的相依的環境</p>
<p>最頭痛的是，使用不同電腦、不同作業系統，安裝的流程也不盡相同</p>
<p>像是 <code>Ubuntu</code> 和 <code>Centos</code> 的安裝指令以及可安裝的套件皆不同，更別提 <code>Windows</code> 了</p>
<p>因此會常常遇到我在我的電腦上面寫好一隻程式，但搬到你的電腦上面後就變得不能夠執行了，這種尷尬的問題。</p>
<h2 id="容器-vs-虛擬機"><a href="#容器-vs-虛擬機" class="headerlink" title="容器 vs 虛擬機"></a>容器 vs 虛擬機</h2><p>在容器出來之前，講到虛擬化技術就會想到虛擬機，其中又以 <a href="https://www.vmware.com/tw.html">VMware</a> 和 <a href="https://www.virtualbox.org/">VirtualBox</a> 最具代表。而現在講到容器，又以 Docker 最有名。</p>
<p>但兩者之間有存在一些不同之處，可以用下圖來做比較。</p>
<p><img data-src="https://miro.medium.com/max/1400/0*fQKhoT--2NnLY9YU.png" alt="vm"></p>
<p>虛擬機器是在系統層上虛擬化，透過 <a href="https://zh.wikipedia.org/wiki/Hypervisor">Hypervisor</a> 在目標的機器上提供可以執行一個或多個虛擬機器的平台，而這些虛擬機器可以執行完整的作業系統。</p>
<p>簡單來說，Hypervisor 就是一個可以讓你在作業系統（Host OS）上面再裝一個作業系統（Guest OS），然後讓兩個作業系統彼此不會打架的平台。</p>
<p>所以我們可以在 Mac 電腦上面用虛擬機執行 Windows 的作業系統，反之亦然。</p>
<p><img data-src="https://miro.medium.com/max/1400/0*bL7e7IJ5s-ntdhvC.png" alt="container"></p>
<p>容器是在<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E5%B1%A4%E8%99%9B%E6%93%AC%E5%8C%96">作業系統層上虛擬化</a>，透過 Container Manager 直接將一個應用程式所需的程式碼、函式庫打包，建立資源控管機制隔離各個容器，並分配 Host OS 上的系統資源。透過容器，應用程式不需要再另外安裝作業系統（Guest OS）也可以執行。</p>
<p>由於不用再安裝作業系統（Guest OS），所以容器對比虛擬機有些優勢：</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>容器</th>
<th>虛擬機</th>
</tr>
</thead>
<tbody><tr>
<td>啟動時間</td>
<td>秒級</td>
<td>分鐘級</td>
</tr>
<tr>
<td>容量</td>
<td>MB</td>
<td>GB</td>
</tr>
<tr>
<td>效能</td>
<td>接近原生</td>
<td>比較慢</td>
</tr>
<tr>
<td>系統支援量</td>
<td>單機支援上千個容器</td>
<td>一般幾十個</td>
</tr>
<tr>
<td>複製相同環境</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>隔離性</td>
<td>較差</td>
<td>較好</td>
</tr>
</tbody></table>
<p>但又因為虛擬機有 Hypervisor，所以比起容器擁有更好的隔離性，其他部份則是容器比較有優勢。</p>
<h2 id="使用-Docker-的好處"><a href="#使用-Docker-的好處" class="headerlink" title="使用 Docker 的好處"></a>使用 Docker 的好處</h2><ul>
<li><p>更快速的交付和部署</p>
<p>對開發和維運（DevOps）人員來說，最希望的就是一次建立或設定，可以在任意地方正常執行。</p>
<p>開發者可以使用一個標準的映像檔來建立一套開發容器，開發完成之後，維運人員可以直接使用這個容器來部署程式碼。 Docker 可以快速建立容器，快速迭代應用程式，並讓整個過程全程可見，使團隊中的其他成員更容易理解應用程式是如何建立和工作的。 Docker 容器很輕很快！容器的啟動時間是秒級的，大量地節約開發、測試、部署的時間。</p>
</li>
<li><p>更有效率的虛擬化</p>
<p>Docker 容器的執行不需要額外的虛擬化支援，它是核心層級的虛擬化，因此可以實作更高的效能和效率。</p>
</li>
<li><p>更輕鬆的遷移和擴展</p>
<p>Docker 容器幾乎可以在任意的平台上執行，包括實體機器、虛擬機、公有雲、私有雲、個人電腦、伺服器等。 這種兼容性可以讓使用者把一個應用程式從一個平台直接遷移到另外一個。</p>
</li>
<li><p>更簡單的管理</p>
<p>使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分發和更新，從而實作自動化並且有效率的管理。</p>
</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Docker 的 Logo 設計成鯨魚跟貨櫃，是希望工程師開發的應用程式，能夠像貨櫃屋一般，可以很彈性的搬遷，隨放即用。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
